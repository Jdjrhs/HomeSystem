name: Build and Push Docker Images

on:
  push:
    branches: [ main ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  NAMESPACE: ${{ github.repository_owner }}

jobs:
  compile-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies and check compilation
      run: |
        python -m pip install --upgrade pip
        # Install project dependencies from requirements.txt (excluding heavy GPU packages)
        if [ -f requirements.txt ]; then
          # Filter out GPU packages that are not needed for compilation check
          grep -v "paddlepaddle-gpu" requirements.txt | \
          grep -v "torch>=2.0.0" | \
          grep -v "transformers>=4.30.0" | \
          grep -v "sentence-transformers" > requirements_filtered.txt
          pip install -r requirements_filtered.txt
        fi
        # Install project itself
        if [ -f pyproject.toml ]; then
          pip install -e .
        fi

    - name: Test Python imports
      run: |
        echo "## 🔍 Compilation Check Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Test importing main modules
        python -c "import HomeSystem; print('✅ HomeSystem imports successfully')" || {
          echo "❌ HomeSystem module failed to import" >> $GITHUB_STEP_SUMMARY
          exit 1
        }
        
        # Test importing key submodules
        python -c "from HomeSystem.integrations.database import DatabaseOperations; print('✅ Database operations import successfully')" || {
          echo "❌ Database operations failed to import" >> $GITHUB_STEP_SUMMARY
          exit 1
        }
        
        python -c "from HomeSystem.workflow.engine import WorkflowEngine; print('✅ Workflow engine imports successfully')" || {
          echo "❌ Workflow engine failed to import" >> $GITHUB_STEP_SUMMARY
          exit 1
        }
        
        echo "✅ All core modules compile and import successfully" >> $GITHUB_STEP_SUMMARY

  build-ocr-service:
    runs-on: ubuntu-latest
    needs: [compile-check]
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for OCR service
      id: meta-ocr
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/remote-app-ocr
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push OCR service image
      uses: docker/build-push-action@v5
      with:
        context: ./remote_app/ocr_service
        file: ./remote_app/ocr_service/Dockerfile
        platforms: linux/amd64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta-ocr.outputs.tags }}
        labels: ${{ steps.meta-ocr.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  build-paper-analysis:
    runs-on: ubuntu-latest
    needs: [compile-check]
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for PaperAnalysis service
      id: meta-paper
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/homesystem-paper-analysis
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push PaperAnalysis image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Web/PaperAnalysis/Dockerfile
        platforms: linux/amd64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta-paper.outputs.tags }}
        labels: ${{ steps.meta-paper.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  build-database:
    runs-on: ubuntu-latest
    needs: [compile-check]
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for Database service
      id: meta-database
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/homesystem-postgres
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Database image
      uses: docker/build-push-action@v5
      with:
        context: ./database
        file: ./database/Dockerfile
        platforms: linux/amd64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta-database.outputs.tags }}
        labels: ${{ steps.meta-database.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  build-summary:
    runs-on: ubuntu-latest
    needs: [compile-check, build-ocr-service, build-paper-analysis, build-database]
    if: always()

    steps:
    - name: Summary
      run: |
        echo "## Build Pipeline Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Compilation Status" >> $GITHUB_STEP_SUMMARY
        echo "- **Compile Check**: ${{ needs.compile-check.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Built Images" >> $GITHUB_STEP_SUMMARY
        echo "- **OCR Service**: \`ghcr.io/${{ env.NAMESPACE }}/remote-app-ocr\`" >> $GITHUB_STEP_SUMMARY
        echo "- **PaperAnalysis**: \`ghcr.io/${{ env.NAMESPACE }}/homesystem-paper-analysis\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Database**: \`ghcr.io/${{ env.NAMESPACE }}/homesystem-postgres\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Usage" >> $GITHUB_STEP_SUMMARY
        echo "Pull images using:" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
        echo "docker pull ghcr.io/${{ env.NAMESPACE }}/remote-app-ocr:latest" >> $GITHUB_STEP_SUMMARY
        echo "docker pull ghcr.io/${{ env.NAMESPACE }}/homesystem-paper-analysis:latest" >> $GITHUB_STEP_SUMMARY
        echo "docker pull ghcr.io/${{ env.NAMESPACE }}/homesystem-postgres:latest" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Build Status" >> $GITHUB_STEP_SUMMARY
        echo "- Compile Check: ${{ needs.compile-check.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- OCR Service: ${{ needs.build-ocr-service.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- PaperAnalysis: ${{ needs.build-paper-analysis.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Database: ${{ needs.build-database.result }}" >> $GITHUB_STEP_SUMMARY