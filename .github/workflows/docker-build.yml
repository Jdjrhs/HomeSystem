name: Build and Push Docker Images

on:
  push:
    branches: [ main ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  NAMESPACE: ${{ github.repository_owner }}

jobs:
  code-quality:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ruff mypy pytest pytest-cov pip-audit
        # Install project dependencies
        if [ -f pyproject.toml ]; then
          pip install -e .
        fi
        # Install additional dependencies found in the codebase with version constraints
        pip install flask beautifulsoup4 lxml
        # Install langchain ecosystem with version compatibility
        pip install "langchain>=0.1.0" "langchain-community>=0.0.1"
        # Install langgraph (Python 3.11+ supported)
        pip install langgraph

    - name: Run Ruff linting
      run: |
        echo "## 🔍 Ruff Linting Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        ruff check --output-format=github . || {
          echo "❌ Ruff linting found issues" >> $GITHUB_STEP_SUMMARY
          exit 1
        }
        echo "✅ Ruff linting passed" >> $GITHUB_STEP_SUMMARY

    - name: Run Ruff formatting check
      run: |
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 🎨 Ruff Formatting Check" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        ruff format --check . || {
          echo "❌ Code formatting issues found. Run 'ruff format .' to fix." >> $GITHUB_STEP_SUMMARY
          exit 1
        }
        echo "✅ Code formatting is correct" >> $GITHUB_STEP_SUMMARY

    - name: Run MyPy type checking
      run: |
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 🏷️ MyPy Type Checking" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        mypy HomeSystem --ignore-missing-imports || {
          echo "❌ Type checking found issues" >> $GITHUB_STEP_SUMMARY
          echo "Note: Type checking failures won't block the build" >> $GITHUB_STEP_SUMMARY
        }
        echo "✅ Type checking completed" >> $GITHUB_STEP_SUMMARY

    - name: Run tests with pytest
      run: |
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 🧪 Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        pytest --cov=HomeSystem --cov-report=term-missing --cov-report=xml -v || {
          echo "❌ Some tests failed" >> $GITHUB_STEP_SUMMARY
          echo "Note: Test failures won't block the build" >> $GITHUB_STEP_SUMMARY
        }
        echo "✅ Test execution completed" >> $GITHUB_STEP_SUMMARY

    - name: Security audit with pip-audit
      run: |
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 🔒 Security Audit" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        pip-audit --desc --format=json || {
          echo "⚠️ Security vulnerabilities found" >> $GITHUB_STEP_SUMMARY
          echo "Note: Security issues won't block the build but should be addressed" >> $GITHUB_STEP_SUMMARY
        }
        echo "✅ Security audit completed" >> $GITHUB_STEP_SUMMARY

    - name: Upload coverage reports
      if: matrix.python-version == '3.10'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  build-ocr-service:
    runs-on: ubuntu-latest
    needs: [code-quality]
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for OCR service
      id: meta-ocr
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/remote-app-ocr
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push OCR service image
      uses: docker/build-push-action@v5
      with:
        context: ./remote_app/ocr_service
        file: ./remote_app/ocr_service/Dockerfile
        platforms: linux/amd64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta-ocr.outputs.tags }}
        labels: ${{ steps.meta-ocr.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  build-paper-analysis:
    runs-on: ubuntu-latest
    needs: [code-quality]
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for PaperAnalysis service
      id: meta-paper
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/homesystem-paper-analysis
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push PaperAnalysis image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Web/PaperAnalysis/Dockerfile
        platforms: linux/amd64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta-paper.outputs.tags }}
        labels: ${{ steps.meta-paper.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  build-summary:
    runs-on: ubuntu-latest
    needs: [code-quality, build-ocr-service, build-paper-analysis]
    if: always()

    steps:
    - name: Summary
      run: |
        echo "## Build Pipeline Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Code Quality Status" >> $GITHUB_STEP_SUMMARY
        echo "- **Code Quality**: ${{ needs.code-quality.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Built Images" >> $GITHUB_STEP_SUMMARY
        echo "- **OCR Service**: \`ghcr.io/${{ env.NAMESPACE }}/remote-app-ocr\`" >> $GITHUB_STEP_SUMMARY
        echo "- **PaperAnalysis**: \`ghcr.io/${{ env.NAMESPACE }}/homesystem-paper-analysis\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Usage" >> $GITHUB_STEP_SUMMARY
        echo "Pull images using:" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
        echo "docker pull ghcr.io/${{ env.NAMESPACE }}/remote-app-ocr:latest" >> $GITHUB_STEP_SUMMARY
        echo "docker pull ghcr.io/${{ env.NAMESPACE }}/homesystem-paper-analysis:latest" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Build Status" >> $GITHUB_STEP_SUMMARY
        echo "- Code Quality: ${{ needs.code-quality.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- OCR Service: ${{ needs.build-ocr-service.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- PaperAnalysis: ${{ needs.build-paper-analysis.result }}" >> $GITHUB_STEP_SUMMARY